import {SUDOKU_SIZE, SENCODE_REGEX} from '@sudoku/constants';


/**
 * @param {number[][]} sudoku
 * @returns {string}
 */
export function encodeSudoku(sudoku) {
	// parse the sudoku grid into a string
	let parsed_sudoku = '';
	for (let i = 0; i < SUDOKU_SIZE; i++) {
		for (let j = 0; j < SUDOKU_SIZE; j++) {
			parsed_sudoku += sudoku[i][j];
		}
	}

	return parsed_sudoku;

}


/**
 * @param {string} sencode
 * @returns {number[][]}
 */
export function decodeSencode(sencode) {
	let grid = [
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	];

	const parsed_sencode = sencode.match(SENCODE_REGEX)[1];
	
	let index = 0;

	for (let i = 0; i < SUDOKU_SIZE; i++) {
		for (let j = 0; j < SUDOKU_SIZE; j++) {
			grid[i][j] = parseInt(parsed_sencode[index], 10);
			index++;
		}
	}
	
	console.log("parsed_sencode: ", parsed_sencode);
	console.log(grid);

	return grid;
}


/**
 * @param {string} sencode
 * @returns {boolean}
 */
export function validateSencode(sencode) {
	let flag = sencode && sencode.trim().length !== 0 && SENCODE_REGEX.test(sencode);
	if (flag) {
		console.log('Valid sencode');
	}
	return flag;
}