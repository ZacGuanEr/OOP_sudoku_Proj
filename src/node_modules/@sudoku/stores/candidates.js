import { writable } from 'svelte/store';

function cclone(obj) {
	return JSON.parse(JSON.stringify(obj));
}

function createCandidates() {
	const candidates = writable({});

	return {
		subscribe: candidates.subscribe,

		add(pos, candidate) {
			candidates.update($candidates => {
				if (!$candidates.hasOwnProperty(pos.x + ',' + pos.y)) {
					$candidates[pos.x + ',' + pos.y] = [candidate];
				} else if ($candidates[pos.x + ',' + pos.y].includes(candidate)) {
					delete $candidates[pos.x + ',' + pos.y][$candidates[pos.x + ',' + pos.y].indexOf(candidate)];
				} else {
					$candidates[pos.x + ',' + pos.y].push(candidate);
				}

				return $candidates;
			});
		},

		clear(pos) {
			candidates.update($candidates => {
				delete $candidates[pos.x + ',' + pos.y];
				return $candidates;
			});
		},

		addByKey(key, candidate){
			candidates.update($candidates => {
				if (!$candidates.hasOwnProperty(key)) {
					$candidates[key] = [candidate];
				} else if (!$candidates[key].includes(candidate)) {
					// delete $candidates[key][$candidates[key].indexOf(candidate)];
					$candidates[key].push(candidate);
				} 

				return $candidates;
			});
		},

		updateByKey(key, candidate_arr){
			
			candidates.update($candidates => {
				// console.log('before updatebykey, ', $candidates)
				if ($candidates.hasOwnProperty(key)) {
					$candidates[key] = cclone(candidate_arr);
				}
				return $candidates;
			})
		},

		clearByKey(key) {
			
			candidates.update($candidates => {
				// console.log('candidates clear key: ',$candidates, key)
				delete $candidates[key];
				return $candidates;
			});
		},


		clearall() {
			candidates.update($candidates => {
				for (let key in $candidates) {
                    delete $candidates[key];
                }
				return $candidates;
			});
		}
	}
}

export const candidates = createCandidates();